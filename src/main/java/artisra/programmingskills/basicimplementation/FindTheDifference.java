package artisra.programmingskills.basicimplementation;

/**
 * This class provides a solution to find the difference between two strings.
 * <p>
 * Given two strings `s` and `t`, where `t` is generated by shuffling `s` and adding one extra character,
 * this class efficiently finds the added character.
 */
public class FindTheDifference {

    private static final int CHAR_POSITION_OFFSET = 97;

    /**
     * Finds the extra character in string `t` compared to string `s`.
     * <p>
     * This method calculates the frequency of each character in `s` using an integer array.
     * It then iterates through `t`, decrementing the frequency of each character.
     * The first character encountered with a negative frequency is the added character.
     *
     * @param s the original string
     * @param t the string with an added character
     * @return the added character
     */
    public char findTheDifference(String s, String t) {
        int[] charFrequency = getCharFrequency(s);
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            boolean charRemoved = reduceCharFrequency(charFrequency, c);
            if (!charRemoved) return c;
        }
        return ' ';
    }

    /**
     * Calculates the frequency of each character in a string.
     * <p>
     * This method creates an integer array of size 26 to store the frequency of each lowercase letter.
     * It iterates through the string, incrementing the corresponding index in the array for each character.
     *
     * @param s the input string
     * @return an integer array representing the character frequencies
     */
    private static int[] getCharFrequency(String s) {
        int[] charFrequency = new int[26];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int positionInAlphabet = getPositionInAlphabet(c);
            charFrequency[positionInAlphabet]++;
        }
        return charFrequency;
    }

    /**
     * Decrements the frequency of a character in the frequency array.
     * <p>
     * This method calculates the position of the character in the alphabet and decrements its frequency.
     * It returns `true` if the frequency is still non-negative, indicating the character was found in `s`.
     *
     * @param charFrequency the frequency array
     * @param c the character to decrement
     * @return `true` if the character was found in `s`, `false` otherwise
     */
    private static boolean reduceCharFrequency(int[] charFrequency, char c) {
        int positionInAlphabet = getPositionInAlphabet(c);
        charFrequency[positionInAlphabet]--;
        return charFrequency[positionInAlphabet] >= 0;
    }

    /**
     * Calculates the position of a character in the alphabet.
     * <p>
     * This method assumes lowercase letters and calculates the position by subtracting the ASCII value of 'a'.
     *
     * @param c the character to calculate the position for
     * @return the position of the character in the alphabet
     */
    private static int getPositionInAlphabet(char c) {
        return c - CHAR_POSITION_OFFSET;
    }
}
